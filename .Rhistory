# Set path
setwd("D:/Courses/Data Science/Course 5 - Reproducible Research/Project 1/RepData_PeerAssessment1")
# Load data from zip file
activityData <- read.table(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
# Convert date to proper format
activityData$date <- strptime(activityData$date, format="%Y-%m-%d")
# Remove NAs
activityData <- activityData[!is.na(activityData$steps),]
# Split according to dates and sum no. of steps. Ignore NAs.
dailySteps <- sapply(split(activityData$steps, as.Date(activityData$date)), sum, na.rm = TRUE)
dailySteps
# Draw histogram
hist(dailySteps, breaks = 30, col = "lightblue", xlab = "Number of Steps", main = "Histogram of Activity Data")
# Mean
#hist(dailySteps, breaks = 30, col = "lightblue", xlab = "Number of Steps", main = "Histogram of Activity Data")
# Mean
mean(dailySteps)
median(dailySteps)
# Mean
mean(dailySteps), median(dailySteps)
# Mean
mean(dailySteps); median(dailySteps)
median(dailySteps)
print(mean(dailySteps))
print(median(dailySteps))
print(mean(dailySteps));
mean(dailySteps); median(dailySteps)
activityData
plot(activityData$interval, activityData$steps)
plot(activityData$interval, activityData$steps, type = 'l')
plot(activityData$interval, dailySteps, type = 'l')
m <- sapply(split(activityData$steps, as.Date(activityData$date)), mean, na.rm = TRUE)
plot(activityData$interval, m, type = 'l')
plot(activityData$interval, activityData$steps, type = 'l')
summary(activityData)
str(activityData)
count(activityData)
s <- split(activityData$steps, activityData$interval)
s
mean(s)
s <- lapply(split(activityData$steps, activityData$interval),mean)
s
s <- sapply(split(activityData$steps, activityData$interval),mean)
s
plot(s)
plot(s,type='l')
t<-activityData[activityData$interval==5,]
t
plot(t)
plot(t$date,t$steps)
plot(t$date,t$steps,type = 'l')
plot(s,type='l')
t
s
intervalMean <- sapply(split(activityData$steps, activityData$interval), mean, na.rm = TRUE)
intervalMean
plot(intervalMean,type='l')
plot(unique(activityData$interval), intervalMean,type='l')
# Split according to intervals and calculate means.
intervalMean <- sapply(split(activityData$steps, activityData$interval), mean, na.rm = TRUE)
intervals <- unique(activityData$interval)
plot(intervals, intervalMean, type="l", xlab="Interval Number", ylab="Average Number of Steps")
intervalMean
max(intervalMean)
# Split according to intervals and calculate means.
intervalMean <- sapply(split(activityData$steps, activityData$interval), mean, na.rm = TRUE)
intervals <- unique(activityData$interval)
plot(intervals, intervalMean, type="l", xlab="5-minute Interval", ylab="Average Number of Steps")
head(intervalMean)
names(intervalMean)
max(intervalMean)
names(max(intervalMean))
max.col(interaction())
max.col(intervalMean)
max(intervalMean)
which.max(intervalMean)
intervalMean[835,]
intervalMean[835]
intervalMean[,835]
intervalMean[]
which.max(intervalMean)
which.is.max(intervalMean)
which(intervalMean==max(intervalMean))
row(intervalMean)[intervalMean==max(intervalMean)]
data.frame(intervalMean)
i <- data.frame(intervalMean)
dim(i)
names(i)
i[0]
i[1]
max(i)
which.max(i)
i[1]
which.max(i[1])
dim(i)
i[835,1]
i[835,]
which.max(i)
tapply(intervalMean,max)
class(intervalMean)
class(intervalMean[1])
class(which.max(i))
class(which.max(activityData))
which.max(activityData)
which.max(interva)
which.max(intervalMean)
class(which.max(intervalMean))
class(i)
dim(i)
dim(intervalMean)
which.max(intervalMean)
which.max(intervalMean)[0]
which.max(intervalMean)[1]
intervalMean[which.max(intervalMean),1]
intervalMean[835,1]
intervalMean[835,]
intervalMean[835]
intervalMean[1]
intervalMean[835]
intervalMean[104]
table(intervalMean)
data_frame(intervalMean)
i<-data_frame(intervalMean)
str(i)
which.max(i)
unlist(intervalMean)
i<-unlist(intervalMean)
dim(i)
str(i)
as.numeric(i)
i<-as.numeric(i)
dim(i)
str(i)
max(i)
which.max(i)
104*5
intervalMean
names(intervalMean)
intervalMean
data.frame(names(intervalMean),unlist(intervalMean))
i<-data.frame(names(intervalMean),unlist(intervalMean))
dim(i)
max(i)
i<-as.numeric(i)
unlist(intervalMean)
i<-unlist(intervalMean)
i
max(i)
which.max(i)
index(i)
as.numeric(i)
unlist(i)
i[1]
i[1][1]
i[1][0]
names(i)
data.frame(names(i),as.numeric(i))
data.frame(names(intervalMean),as.numeric(unlist(intervalMean)))
i<-data.frame(names(intervalMean),as.numeric(unlist(intervalMean)))
dim(i)
max(i[,2])
which.max(i)
which.max(i[,2])
i[which.max(i[,2]),]
i[which.max(i[,2]),1]
# Re-format data
intervalData <- data.frame(names(intervalMean),as.numeric(unlist(intervalMean)))
# Interval with maximum number of steps
intervalData[which.max(intervalData[,2]),1]
# Set path
setwd("D:/Courses/Data Science/Course 5 - Reproducible Research/Project 1/RepData_PeerAssessment1")
# Load data from zip file
activityData <- read.table(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
# Convert date to proper format
activityData$date <- strptime(activityData$date, format="%Y-%m-%d")
# Remove NAs
#activityData <- activityData[!is.na(activityData$steps),]
# Split according to dates and sum no. of steps.
dailySteps <- sapply(split(activityData$steps, as.Date(activityData$date)), sum, na.rm = TRUE)
dailySteps
# Draw histogram
hist(dailySteps, breaks = 30, col = "lightblue", xlab = "Number of Steps", main = "Histogram of Activity Data")
# Mean & Median
mean(dailySteps); median(dailySteps)
# Split according to intervals and calculate means.
intervalMean <- sapply(split(activityData$steps, activityData$interval), mean, na.rm = TRUE)
intervals <- unique(activityData$interval)
plot(intervals, intervalMean, type="l", xlab="5-minute Interval", ylab="Average Number of Steps")
# Re-format data
intervalData <- data.frame(names(intervalMean),as.numeric(unlist(intervalMean)))
# Interval with maximum number of steps
intervalData[which.max(intervalData[,2]),1]
hist(dailySteps, breaks = 10, col = "lightblue", xlab = "Number of Steps", main = "Histogram of Activity Data")
hist(dailySteps, breaks = 5, col = "lightblue", xlab = "Number of Steps", main = "Histogram of Activity Data")
activityData <- read.table(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
activityData <- read.table(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
# Set path
setwd("D:/Courses/Data Science/Course 5 - Reproducible Research/Project 1/RepData_PeerAssessment1")
# Load data from zip file
activityData <- read.table(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
# Convert date to proper format
activityData$date <- strptime(activityData$date, format="%Y-%m-%d")
# Remove NAs
#activityData <- activityData[!is.na(activityData$steps),]
# Split according to dates and sum no. of steps.
dailySteps <- sapply(split(activityData$steps, as.Date(activityData$date)), sum) #, na.rm = TRUE)
dailySteps
# Draw histogram
hist(dailySteps, breaks = 5, col = "lightblue", xlab = "Number of Steps", main = "Histogram of Activity Data")
# Mean & Median
mean(dailySteps); median(dailySteps)
dailySteps <- sapply(split(activityData$steps, as.Date(activityData$date)), sum, na.rm = TRUE)
# Split according to dates and sum no. of steps.
dailySteps <- sapply(split(activityData$steps, as.Date(activityData$date)), sum, na.rm = TRUE)
dailySteps
# Draw histogram
hist(dailySteps, breaks = 5, col = "lightblue", xlab = "Number of Steps", main = "Histogram of Activity Data")
# Mean & Median
mean(dailySteps); median(dailySteps)
# Mean & Median
mean(dailySteps); median(dailySteps)
# Split according to intervals and calculate means.
intervalMean <- sapply(split(activityData$steps, activityData$interval), mean)
intervals <- unique(activityData$interval)
plot(intervals, intervalMean, type="l", xlab="5-minute Interval", ylab="Average Number of Steps")
# Split according to intervals and calculate means.
intervalMean <- sapply(split(activityData$steps, activityData$interval), mean, na.rm = TRUE)
intervals <- unique(activityData$interval)
plot(intervals, intervalMean, type="l", xlab="5-minute Interval", ylab="Average Number of Steps")
intervalData[which.max(intervalData[,2]),]
intervalData <- data.frame(names(intervalMean),as.numeric(unlist(intervalMean)))
names(intervalData)<-c("intervalNumber", "IntervalMean")
intervalData[which.max(intervalData[,2]),]
# Re-format data
intervalData <- data.frame(names(intervalMean),as.numeric(unlist(intervalMean)))
names(intervalData)<-c("intervalNumber", "IntervalMean")
# Interval with maximum number of steps
#intervalData[which.max(intervalData[,2]),1]
intervalData[which.max(intervalData[,2]),]
activityData2 <- activityData[!is.na(activityData)]
activityData
activityData2
activityData2 <- activityData[!is.na(activityData),]
activityData2
sum(is.na(activityData))
sum(is.na(activityData))
is.na(activityData)
is.na(activityData[,1])
sum(is.na(activityData[,1]))
activityData[,1]
activityData[,0]
activityData[,2]
activityData[,3]
sum(is.na(activityData[,2]))
sum(is.na(activityData[,3]))
sum(is.na(activityData[,1]))
activityData
activityData[is.na(activityData[,1]),]
f<-activityData[is.na(activityData[,1]),]
f[,2]
mean(dailySteps)
stepMean <- sapply(split(activityData$steps, as.Date(activityData$date)), mean, na.rm = TRUE)
stepMean
sapply(split(activityData$steps, as.Date(activityData$date)), mean, na.rm = TRUE)
sapply(split(activityData2$steps, as.Date(activityData2$date)), mean, na.rm = TRUE)
f[,2]
f
activityData[is.na(activityData$steps),1]
activityData[is.na(activityData$steps),2]
intervalMean
activityData[is.na(activityData$steps),3]
intervalMean[1045,]
intervalMean[1045]
length(intervalMean)
dim(intervalMean)
as.numeric(intervalMean)
intervalData
names(intervalData)
intervalData[intervalData$intervalNumber==1045,]
intervalData[intervalData$intervalNumber==1045,2]
intervalData[intervalData$intervalNumber==activityData[is.na(activityData$steps),1],2]
intervalData[intervalData$intervalNumber==activityData[is.na(activityData$steps),3],2]
activityData[is.na(activityData$steps),3]
count(intervalData[intervalData$intervalNumber==1045,2])
length(intervalData[intervalData$intervalNumber==1045,2])
length(activityData[is.na(activityData$steps),3])
activityData[is.na(activityData$steps),3]
intervalData[intervalData$intervalNumber==activityData[is.na(activityData$steps),3],]
activityData[is.na(activityData$steps),1]
activityData[is.na(activityData$steps),3]
intervalData[intervalData$intervalNumber==655,3],]
intervalData[intervalData$intervalNumber==655,3]
intervalData[intervalData$intervalNumber==655,]
intervalData[intervalData$intervalNumber==655,2]
intervalData[intervalData$intervalNumber==activityData[is.na(activityData$steps),2],]
intervalData[intervalData$intervalNumber==activityData[is.na(activityData$steps),3],]
activityData[is.na(activityData$steps),3]
intervalNA <- activityData[is.na(activityData$steps),3]
dim(intervalNA)
length(intervalNA)
intervalData[intervalData$intervalNumber==intervalNA,]
length(intervalNA)
str(intervalNA)
summary(intervalNA)
intervalNA[2300]
intervalNA[2300,]
intervalNA[2300]
intervalNA[]
intervalData[intervalData$intervalNumber==intervalNA]
intervalData[intervalData$intervalNumber==intervalNA,]
intervalData$intervalNumber==intervalNA
which(intervalData$intervalNumber,intervalNA)
which(intervalData$intervalNumber %in% intervalNA)
intervalData
activityData[is.na(activityData$steps),3]
activityData[is.na(activityData$steps),1]
activityData[is.na(activityData$steps),2]
activityData[is.na(activityData$steps),3]
intervalData
intervalData[2350]
intervalData[intervalData$intervalNumber == 2350,]
intervalData[intervalData$intervalNumber == c(2350,2355),]
intervalData[intervalData$intervalNumber == c(2350,2355),3]
intervalData[intervalData$intervalNumber == c(2350,2355),2]
activityData[is.na(activityData$steps),3]
class(activityData[is.na(activityData$steps),3])
class(activityData[[is.na(activityData$steps),3]])
class(activityData[is.na(activityData$steps),3])
intervalData[intervalData$intervalNumber == activityData[is.na(activityData$steps),3],2]
activityData[is.na(activityData$steps),3]
intervalData[intervalData$intervalNumber == 1115,2]
intervalData
which(intervalData$intervalNumber == 2355)
which(activityData[is.na(activityData$steps),3])
which(intervalData$intervalNumber == activityData[is.na(activityData$steps),3])
which(intervalData$intervalNumber == 2305)
which(intervalData$intervalNumber == c(2200,2305))
head(activityData[is.na(activityData$steps),3])
tail(activityData[is.na(activityData$steps),3])
which(intervalData$intervalNumber == tail(activityData[is.na(activityData$steps),3]))
which(intervalData$intervalNumber == activityData[is.na(activityData$steps),3])
which(intervalData$intervalNumber == tail(activityData[is.na(activityData$steps),3]))
which(intervalData$intervalNumber == tail(activityData[is.na(activityData$steps),3],50))
which(intervalData$intervalNumber == activityData[is.na(activityData$steps),3])
length(which(intervalData$intervalNumber == activityData[is.na(activityData$steps),3]))
length(activityData[is.na(activityData$steps),3])
tail(which(intervalData$intervalNumber == activityData[is.na(activityData$steps),3]))
tail(which(intervalData$intervalNumber == unlist(activityData[is.na(activityData$steps),3])))
which(intervalData$intervalNumber == unlist(activityData[is.na(activityData$steps),3]))
intervalData[1000]
intervalData[1000],
intervalData[1000,]
intervalData[intervalData$intervalNumber == unlist(activityData[is.na(activityData$steps),3]),]
is.na(activityData$steps)
is.na(activityData)
activityData[is.na(activityData$steps),3]
activityData[is.na(activityData$steps),]
activityData[is.na(activityData$steps),3]
list(activityData[is.na(activityData$steps),3])
intervalData[intervalData$intervalNumber == list(activityData[is.na(activityData$steps),3]), 2]
intervalData[intervalData$intervalNumber == cc(activityData[is.na(activityData$steps),3]), 2]
intervalData[intervalData$intervalNumber == c(activityData[is.na(activityData$steps),3]), 2]
intervalData[intervalData$intervalNumber == activityData[is.na(activityData$steps),3], 2]
list(activityData[is.na(activityData$steps),3])
activityData[is.na(activityData$steps),3]
f<-activityData[is.na(activityData$steps),3]
class(f)
class(list(f))
f<-list(activityData[is.na(activityData$steps),3])
intervalData[intervalData$intervalNumber == f,2]
intervalData[intervalData$intervalNumber == 930,2]
f
intervalData[intervalData$intervalNumber == f,2]
class(intervalData)
data.table(intervalData)
data.table::data.table(intervalData)
g<-data.table::data.table(intervalData)
class(g)
g[1]
g[10]
g[g$intervalNumber == f,2]
g[g$intervalNumber == f[[]],2]
f[]
g[g$intervalNumber == f[],2]
g$intervalNumber == f[]
is.na(activityData$steps)
f[]
f %in% intervalData
f <- activityData[is.na(activityData$steps,3)]
f <- activityData[is.na(activityData$steps),3]
f
f %in% intervalData
f
f %in% intervalData
intervalData %>% select(f)
f
intervalData$intervalNumber %>% select(f)
data(f)
f
as.numeric(f)
as.numeric(f) %in% intervalData
where(intervalData,f)
which(intervalData, c(205,210))
which(intervalData, 210)
which(intervalData)
f<-activityData[is.na(activityData$steps),3]
intervalData[intervalData$intervalNumber == f,2]
intervalData[intervalData$intervalNumber == c(2350,2355),2]
unlist(f)
intervalData[intervalData$intervalNumber == unlist(f),2]
ave(activityData$steps, activityData$interval,FUN=function(x) replace(x,is.na(x),mean(x,na.rm=TRUE)))
f<-ave(activityData$steps, activityData$interval,FUN=function(x) replace(x,is.na(x),mean(x,na.rm=TRUE)))
activityData$steps == f
activityData$steps, f
print(activityData$steps, f)
cbind(activityData$steps,f)
cbind(activityData,f)
intervalData$intervalNumber==0
intervalData[intervalData$intervalNumber==0]
intervalData[intervalData$intervalNumber==0,]
intervalData[intervalData$intervalNumber==10,]
# Re-format data
intervalData <- data.frame(names(intervalMean),as.numeric(unlist(intervalMean)))
names(intervalData)<-c("intervalNumber", "IntervalMean")
# Interval with maximum number of steps
intervalData[which.max(intervalData[,2]),]
activityData2 <- activityData[!is.na(activityData),]
sum(is.na(activityData))
sum(is.na(activityData))
# Use ave() function to replace missing step values with interval average.
newSteps <- ave(activityData$steps, activityData$interval,FUN=function(x) replace(x,is.na(x),mean(x,na.rm=TRUE)))
# Use ave() function to replace missing step values with interval average.
newSteps <- ave(activityData$steps, activityData$interval,FUN=function(x) replace(x,is.na(x),mean(x,na.rm=TRUE)))
newSteps
# create new dataset
newActivityData <- activityData
newActivityData$steps <- newSteps
# Calculate new total steps per day
newDailySteps <- sapply(split(newActivityData$steps, as.Date(newActivityData$date)), sum, na.rm = TRUE)
# Draw histogram
hist(newDailySteps, breaks = 5, col = "lightred", xlab = "Number of Steps", main = "Histogram of Activity Data")
# Calculate new total steps per day
newDailySteps <- sapply(split(newActivityData$steps, as.Date(newActivityData$date)), sum, na.rm = TRUE)
# Draw histogram
hist(newDailySteps, breaks = 5, col = "lightgreen", xlab = "Number of Steps", main = "Histogram of New Activity Data")
# Mean & Median
mean(newDailySteps); median(newDailySteps)
# Mean & Median
mean(dailySteps); median(dailySteps)
# Use ave() function to replace missing step values with interval average.
newSteps <- ave(activityData$steps, activityData$interval,FUN=function(x) replace(x,is.na(x),mean(x,na.rm=TRUE)))
# Calculate new total steps per day
newDailySteps <- sapply(split(newActivityData$steps, as.Date(newActivityData$date)), sum, na.rm = TRUE)
# Calculate new total steps per day
newDailySteps <- sapply(split(newActivityData$steps, as.Date(newActivityData$date)), sum, na.rm = TRUE)
newDailySteps
# Draw histogram
hist(newDailySteps, breaks = 5, col = "lightgreen", xlab = "Number of Steps", main = "Histogram of New Activity Data")
weekdays(activityData$date)
weekend<-c("Saturday","Sunday")
weekdays(activityData$date) %in% weekend
activity[weekdays(activityData$date) %in% weekend,]
activityData[weekdays(activityData$date) %in% weekend,]
activityData$weekend <- weekdays(activityData$date) %in% c("Saturday","Sunday")
activityData
tail(activityData)
group_by(activityData,weekend)
group_by(activityData$steps,weekend)
group_by(activityData$steps,as.numeric(weekend))
as.numeric(weekdays(activityData$date) %in% c("Saturday","Sunday"))
sapply(split(activityData$steps, activityData$weekend), mean, na.rm = TRUE)
weekend <- as.numeric(weekdays(activityData$date) %in% c("Saturday","Sunday"))
sapply(split(activityData$steps, weekend), mean, na.rm = TRUE)
weekend <- weekdays(activityData$date) %in% c("Saturday","Sunday")
sapply(split(activityData$steps, weekend), mean, na.rm = TRUE)
head(activityData,50)
head(activityData,500)
sapply(split(activityData$steps, as.Date(activityData$date)), sum, na.rm = TRUE)
is.na(activityData$steps)
activityData[is.na(activityData$steps),]
validActivityData <- activityData[!is.na(activityData$steps),]
validActivityData
sapply(split(validActivityData$steps, as.Date(validActivityData$date)), sum)
# Set path
setwd("D:/Courses/Data Science/Course 5 - Reproducible Research/Project 1/RepData_PeerAssessment1")
# Load data from zip file
activityData <- read.table(unz("activity.zip", "activity.csv"), header=T, quote="\"", sep=",")
# Convert date to proper format
activityData$date <- strptime(activityData$date, format="%Y-%m-%d")
validActivityData <- activityData[!is.na(activityData$steps),]
# Split according to dates and sum no. of steps.
dailySteps <- sapply(split(validActivityData$steps, as.Date(validActivityData$date)), sum)
dailySteps
# Draw histogram
hist(dailySteps, breaks = 5, col = "lightblue", xlab = "Number of Steps", main = "Histogram of Activity Data")
# Mean & Median
mean(dailySteps); median(dailySteps)
# Split according to intervals and calculate means.
intervalMean <- sapply(split(activityData$steps, activityData$interval), mean)
intervals <- unique(activityData$interval)
plot(intervals, intervalMean, type="l", xlab="5-minute Interval", ylab="Average Number of Steps")
# Split according to intervals and calculate means.
intervalMean <- sapply(split(validActivityData$steps, validActivityData$interval), mean)
intervals <- unique(validActivityData$interval)
plot(intervals, intervalMean, type="l", xlab="5-minute Interval", ylab="Average Number of Steps")
# Re-format data
intervalData <- data.frame(names(intervalMean),as.numeric(unlist(intervalMean)))
names(intervalData)<-c("intervalNumber", "IntervalMean")
# Interval with maximum number of steps
intervalData[which.max(intervalData[,2]),]
weekend <- weekdays(activityData$date) %in% c("Saturday","Sunday")
sapply(split(activityData$steps, weekend), mean, na.rm = TRUE)
